From 507be8a35a5818861fb232a88fb08715838fe1e8 Mon Sep 17 00:00:00 2001
From: tojatos <tojatos@gmail.com>
Date: Tue, 2 May 2023 20:47:00 +0200
Subject: [PATCH] fixed

---
 main.cpp | 116 ++++++++++++++++++++-----------------------------------
 1 file changed, 41 insertions(+), 75 deletions(-)

diff --git a/main.cpp b/main.cpp
index 2064a10..87c0135 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,5 +1,6 @@
 #include <iostream>
 #include <string>
+#include <fstream>
 #include "List.h"
 #define MAXINT  2147483647
 //#include "MyString.h"
@@ -64,7 +65,8 @@ bool isOnMap(int x, int y) {
 bool findLetter(int x, int y, char** map) {
 	//if(map[x][y] != '*' && map[x][y] != '.' && map[x][y] != '#'){
 	if (isOnMap(x, y)) {
-		if ((map[x][y] >= '0' && map[x][y] <= '9') || (map[x][y] >= 'A' && map[x][y] <= 'Z')) {
+        char letter = map[y][x];
+		if ((letter >= '0' && letter <= '9') || (letter >= 'A' && letter <= 'Z')) {
 			return true;
 		}
 		else return false;
@@ -87,7 +89,7 @@ string findCityName(int x, int y, char** map) {
 	}
 
 	for (int i = x1; i < x; i++) {
-		tmp += map[i][y];
+		tmp += map[y][i];
 	}
 	x1 = x;
 	//koniec wyrazu
@@ -97,7 +99,7 @@ string findCityName(int x, int y, char** map) {
 	}
 	
 	for (int i = x; i <= x1; i++) {
-		tmp += map[i][y];
+		tmp += map[y][i];
 	}
 	
 	return tmp;
@@ -117,7 +119,7 @@ void search(city firstCity, coordinates current, MyList<coordinates>& visited, M
 	for (int j = 0; j < 4; j++) {
 		coordinates newCoords = coordinatesToCheck[j];
 		if (isOnMap(newCoords.x, newCoords.y)) {
-			char character = map[newCoords.x][newCoords.y];
+			char character = map[newCoords.y][newCoords.x];
 			if (visited.find(newCoords) == nullptr) { //czemu sprawdzamy czy nullptr???
 				visited.add(newCoords); //dodajemy koordynaty do odwiedzonych
 
@@ -140,42 +142,6 @@ void search(city firstCity, coordinates current, MyList<coordinates>& visited, M
 			}
 		}
 	}
-	/*if (isOnMap(current.x, current.y - 1)) {
-		char character = map[current.x][current.y - 1];
-		coordinates newCoords = { current.x, current.y - 1 };
-		if (visited.find(newCoords) == nullptr) {
-			visited.add(newCoords);
-
-			if (character == '#') {
-				search(firstCity, newCoords, visited, trips, map, distance + 1);
-			}
-			else if (character == '*') {
-				trip t;
-				t.start = firstCity.name;
-				for (int i = 0; i < cities.size(); i++) {
-					city c = cities.valueAt(0);
-					if (c.pozX == current.x && c.pozY == current.y) {
-						t.destination = c.name;
-						break;
-					}
-				}
-				t.time = distance;
-				trips.add(t);
-			}
-		}
-	}
-	if (isOnMap(current.x, current.y + 1)) {
-		map[current.x][current.y + 1];
-
-	}
-	if (isOnMap(current.x - 1, current.y)) {
-		map[current.x - 1][current.y];
-
-	}
-	if (isOnMap(current.x + 1, current.y)) {
-		map[current.x + 1][current.y];
-
-	}*/
 }
 
 // https://eduinf.waw.pl/inf/alg/001_search/0138.php
@@ -265,22 +231,21 @@ void x(question q) {
 		cout << cityNames.valueAt(p[i]) << ' ';
 	}
 	cout << endl;*/
-	cout << "CIty names: ";
-	cout << cityNames << endl;
-	for (int i = 0; i < cities.size(); i++) {
-		cout << d[i] << ' ';
-	}
-	cout << endl;
-
-	for (int i = 0; i < cities.size(); i++) {
-		cout << p[i] << ' ';
-	}
-	cout << endl;
+//	cout << "CIty names: ";
+//	cout << cityNames << endl;
+//	for (int i = 0; i < cities.size(); i++) {
+//		cout << d[i] << ' ';
+//	}
+//	cout << endl;
+//
+//	for (int i = 0; i < cities.size(); i++) {
+//		cout << p[i] << ' ';
+//	}
+//	cout << endl;
 
 
 	int destIndex = cityNames.findindex(q.town2);
-	cout << d[destIndex] << endl;
-	
+	cout << d[destIndex] << ' ';
 
 	int previousIndex = p[destIndex];
 	MyList<string> cityPath;
@@ -307,17 +272,18 @@ int main() {
 	}
 	
 	// wczytanie wartoœci do tablicy
-	for (int i = 0; i < width; i++) {
-		for (int j = 0; j < height; j++) {
-			cin >> map[j][i];
-		}
-	}
-	/*for (int i = 0; i < height; i++) {
+	for (int i = 0; i < height; i++) {
 		for (int j = 0; j < width; j++) {
-			cout << map[i][j];
+			cin >> map[i][j];
 		}
-		cout << endl;
-	}*/
+	}
+
+//	for (int i = 0; i < height; i++) {
+//		for (int j = 0; j < width; j++) {
+//			cout << map[i][j];
+//		}
+//		cout << endl;
+//	}
 
 	cin >> flightCounter;
 
@@ -340,22 +306,22 @@ int main() {
 	}
 
 	//zapisywanie miast do listy
-	for (int i = 0; i < width; i++) {
-		for (int j = 0; j < height; j++) {
+	for (int i = 0; i < height; i++) {
+		for (int j = 0; j < width; j++) {
 			//szukanie gwiazdki z kazdej strony 
 			if (map[i][j] == '*') {
 				city c;
-				c.pozX = i;
-				c.pozY = j;
-
-				if (findLetter(i - 1, j, map)) { c.name = findCityName(i - 1, j, map); }
-				else if (findLetter(i + 1, j, map)) { c.name = findCityName(i + 1, j, map); }
-				else if (findLetter(i, j - 1, map)) { c.name = findCityName(i, j - 1, map); }
-				else if (findLetter(i, j + 1, map)) { c.name = findCityName(i, j + 1, map); }
-				else if (findLetter(i + 1, j + 1, map)) { c.name = findCityName(i + 1, j + 1, map); }
-				else if (findLetter(i - 1, j - 1, map)) { c.name = findCityName(i - 1, j - 1, map); }
-				else if (findLetter(i + 1, j - 1, map)) { c.name = findCityName(i + 1, j - 1, map); }
-				else if (findLetter(i - 1, j + 1, map)) { c.name = findCityName(i - 1, j + 1, map); }
+				c.pozX = j;
+				c.pozY = i;
+
+				if (findLetter(j - 1, i, map)) { c.name = findCityName(j - 1, i, map); }
+				else if (findLetter(j + 1, i, map)) { c.name = findCityName(j + 1, i, map); }
+				else if (findLetter(j, i - 1, map)) { c.name = findCityName(j, i - 1, map); }
+				else if (findLetter(j, i + 1, map)) { c.name = findCityName(j, i + 1, map); }
+				else if (findLetter(j + 1, i + 1, map)) { c.name = findCityName(j + 1, i + 1, map); }
+				else if (findLetter(j - 1, i - 1, map)) { c.name = findCityName(j - 1, i - 1, map); }
+				else if (findLetter(j + 1, i - 1, map)) { c.name = findCityName(j + 1, i - 1, map); }
+				else if (findLetter(j - 1, i + 1, map)) { c.name = findCityName(j - 1, i + 1, map); }
 				else throw;
 
 				cities.add(c); //dodanie miasta do tablicy
-- 
2.27.0.windows.1

